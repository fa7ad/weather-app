{"version":3,"sources":["serviceWorker.ts","actions/location.ts","reducers/location.ts","actions/weather.ts","reducers/weather.ts","actions/ui.ts","reducers/ui.ts","store.ts","api.ts","actions/index.ts","components/CurrentWeather/CurrentWeather.tsx","components/Forecasts/Forecast.tsx","components/Forecasts/Forecasts.tsx","components/App/App.tsx","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","setLocation","createAction","createReducer","list","current","Object","defineProperty","type","action","payload","setWeather","initialState","today","date","Date","temp","now","min","max","wind","speed","deg","humidity","icon","main","description","icon_name","weather","assign","setTheme","ui","theme","store","configureStore","reducer","appid","toWeather","data","dt","Math","round","temp_min","temp_max","id","slice","replace","_callee","params","_location$split3","_location$split4","lat","lon","_ref","revList","_today","_tomorrow","_after","findDay","todayRaw","tomorrowRaw","afterRaw","regenerator_default","a","wrap","_context","prev","next","units","test","q","split","slicedToArray","axios","get","sent","call","moment","add","day","el","unix","utc","isSame","filter","abrupt","tomorrow","after","stop","Creatable","require","default","CurrentWeather","timer","setTimeout","handleLocationChange","event","_this","props","setLocationAndUpdate","value","listLocations","locationList","map","label","_this2","this","setInterval","clearInterval","_this$props","react_default","createElement","className","cx","concat","onChange","options","components","DropdownIndicator","index_esm","IndicatorSeparator","classNamePrefix","title","wi_index_esm","size","React","PureComponent","connect","dispatch","_location$split","_location$split2","fetchWeather","states","Forecast","Forecasts","Forecast_Forecast","format","Component","App","getHours","Fragment","components_CurrentWeather_CurrentWeather","components_Forecasts_Forecasts","root","document","getElementById","hasChildNodes","hydrate","render","es","components_App_App","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d063b72d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import { createAction } from 'redux-starter-kit';\n\nexport const setLocation = createAction('SET_LOCATION');\n\n","import { createReducer } from 'redux-starter-kit';\nimport { setLocation } from '../actions/location';\n\nexport interface LocationState {\n  list: string[];\n  current: string;\n}\n\nconst initialState: LocationState = {\n  list: [\n    'Dhaka,BD',\n    'Chittagong,BD',\n    'Khulna,BD',\n    'Sylhet,BD',\n    'Rajshahi,BD',\n    'Mymensingh,BD',\n    'Barisal,BD',\n    'Rangpur,BD',\n    'Comilla,BD',\n    'Narayanganj,BD',\n    'Gazipur,BD'\n  ],\n  current: 'Dhaka,BD'\n};\n\nexport const location = createReducer(initialState, {\n  [setLocation.type](state, action) {\n    state.current = action.payload;\n  }\n});\n\nexport default location;\n","import { createAction } from 'redux-starter-kit';\n\nexport const setWeather = createAction('SET_WEATHER');\n","import { createReducer } from 'redux-starter-kit';\nimport { setWeather } from '../actions/weather';\n\nexport interface Weather {\n  date: number;\n  temp: {\n    now: number;\n    min: number;\n    max: number;\n  };\n  wind: {\n    speed: number;\n    deg: number;\n  };\n  humidity: number | string;\n  icon: {\n    main: string;\n    description: string;\n    icon_name: string;\n  };\n}\n\nexport interface WeatherState {\n  today: Weather;\n  tomorrow?: Weather;\n  after?: Weather;\n}\n\nconst initialState: WeatherState = {\n  today: {\n    date: +new Date(),\n    temp: {\n      now: 0,\n      min: 0,\n      max: 0\n    },\n    wind: {\n      speed: 0,\n      deg: 0\n    },\n    humidity: '0%',\n    icon: {\n      main: 'Clear',\n      description: 'clear sky',\n      icon_name: '01d'\n    }\n  }\n};\n\nexport const weather = createReducer(initialState, {\n  [setWeather.type](state, action) {\n    Object.assign(state, action.payload);\n  }\n});\n\nexport default weather;\n","import { createAction } from 'redux-starter-kit';\n\nexport const setTheme = createAction('SET_THEME');\n\nexport const setDarkTheme = () => setTheme('dark');\n\nexport const setLightTheme = () => setTheme('light');\n","import { createReducer } from 'redux-starter-kit';\nimport { setTheme } from '../actions/ui';\n\nexport interface UIState {\n  theme: 'light' | 'dark';\n}\n\nconst initialState: UIState = {\n  theme: 'light'\n};\n\nexport const ui = createReducer(initialState, {\n  [setTheme.type](state, action) {\n    state.theme = action.payload;\n  }\n});\n\nexport default ui;\n","import { configureStore } from 'redux-starter-kit';\nimport { location, weather, ui } from './reducers';\nimport { LocationState } from './reducers/location';\nimport { WeatherState } from './reducers/weather';\nimport { UIState } from './reducers/ui';\n\nconst store = configureStore({\n  reducer: {\n    location,\n    weather,\n    ui\n  }\n});\n\nexport default store;\n\nexport interface StoreState {\n  location: LocationState;\n  weather: WeatherState;\n  ui: UIState;\n}\n","export const appid = '8f2bf25652abdf4ec31970ac8dced7fb';\n\nexport const todayApiUrl = 'https://api.openweathermap.org/data/2.5/weather';\n","import moment, { Moment } from 'moment';\nimport axios from 'axios';\nimport { appid } from '../api';\n\nimport { setLocation } from './location';\nimport { setWeather } from './weather';\nimport { Weather } from '../reducers/weather';\n\nfunction toWeather(data: any): Weather {\n  return {\n    date: data.dt * 1000,\n    temp: {\n      now: Math.round(data.main.temp),\n      min: Math.round(data.main.temp_min),\n      max: Math.round(data.main.temp_max)\n    },\n    wind: data.wind,\n    humidity: data.main.humidity,\n    icon: {\n      main: data.weather[0].main,\n      description: data.weather[0].description,\n      icon_name: (\n        data.weather[0].id +\n        '-' +\n        data.weather[0].icon.slice(-1)\n      ).replace(/(-[0-9])$/, '')\n    }\n  };\n}\n\nasync function fetchWeather(location: string) {\n  const params = {\n    appid,\n    units: 'metric'\n  };\n\n  if (/[a-zA-z]/.test(location)) {\n    Object.assign(params, { q: location });\n  } else {\n    const [lat, lon] = location.split(',');\n    Object.assign(params, { lat, lon });\n  }\n\n  const { data } = await axios.get(\n    'https://api.openweathermap.org/data/2.5/forecast',\n    { params }\n  );\n\n  const revList = [].slice.call(data.list);\n\n  const _today = moment();\n  const _tomorrow = moment();\n  const _after = moment();\n\n  _tomorrow.add(1, 'day');\n  _after.add(2, 'days');\n\n  const findDay = (day: Moment) => (el: any) => {\n    const dt = moment.unix(el.dt).utc();\n    return dt.isSame(day, 'day');\n  };\n\n  const todayRaw = revList.filter(findDay(_today)).slice(-1);\n  const tomorrowRaw = revList.filter(findDay(_tomorrow)).slice(-1);\n  const afterRaw = revList.filter(findDay(_after)).slice(-1);\n\n  return {\n    today: toWeather(todayRaw[0]),\n    tomorrow: toWeather(tomorrowRaw[0]),\n    after: toWeather(afterRaw[0])\n  };\n}\n\nexport const setLocationAndUpdate = (location: string) => (\n  dispatch: (action: any) => void\n) => {\n  const params = {\n    appid,\n    units: 'metric'\n  };\n\n  if (/[a-zA-z]/.test(location)) {\n    Object.assign(params, { q: location });\n  } else {\n    const [lat, lon] = location.split(',');\n    Object.assign(params, { lat, lon });\n  }\n\n  dispatch(setLocation(location));\n\n  return fetchWeather(location)\n    .then(states => dispatch(setWeather(states)))\n    .catch(console.error);\n};\n\nexport { setLocation } from './location';\nexport { setWeather } from './weather';\nexport { setDarkTheme, setLightTheme, setTheme } from './ui';\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport cx from 'classnames';\n\nimport { MdNearMe, MdArrowUpward, MdArrowDownward } from 'react-icons/md';\nimport { WiRaindrop } from 'react-icons/wi';\n\nimport { StoreState } from '../../store';\nimport { Weather } from '../../reducers/weather';\nimport { setLocationAndUpdate } from '../../actions';\n\nimport './CurrentWeather.css';\n\nconst Creatable = require('react-select/creatable/dist/react-select.cjs.prod')\n  .default;\n\ninterface CurrentWeatherProps {\n  theme: 'light' | 'dark';\n  location: string;\n  locationList: string[];\n  weather: Weather;\n  setLocationAndUpdate: (payload: string) => Promise<void>;\n}\n\nclass CurrentWeather extends React.PureComponent<CurrentWeatherProps> {\n  timer: NodeJS.Timeout = setTimeout(() => {}, 0);\n\n  handleLocationChange = (event: { value: string }) => {\n    this.props.setLocationAndUpdate(event.value.replace(/(,BD)?$/, ',BD'));\n  };\n\n  listLocations = this.props.locationList.map(value => ({\n    value,\n    label: value.replace(',BD', '')\n  }));\n\n  componentDidMount() {\n    this.props.setLocationAndUpdate(this.props.location);\n    this.timer = setInterval(\n      () => this.props.setLocationAndUpdate(this.props.location),\n      5e3\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  render() {\n    const { location, theme, weather } = this.props;\n\n    return (\n      <div className={cx('current-weather', `current-weather--${theme}`)}>\n        <Creatable\n          onChange={this.handleLocationChange}\n          options={this.listLocations}\n          value={{ value: location, label: location.replace(',BD', '') }}\n          components={{\n            DropdownIndicator: () => <MdNearMe />,\n            IndicatorSeparator: null\n          }}\n          className='current-weather__location'\n          classNamePrefix='location-select'\n        />\n        <div className='current-weather__temperature'>\n          <div className='current-weather__minmax'>\n            <MdArrowUpward />\n            {weather.temp.max}\n            <sup>&deg;</sup>&nbsp;\n            <MdArrowDownward />\n            {weather.temp.min}\n            <sup>&deg;</sup>\n          </div>\n          {weather.temp.now}\n          <sup>&deg;</sup>\n        </div>\n        <div className='current-weather__icon'>\n          {weather.icon.main}\n          <br />\n          <i className={`owf owf-5x owf-${weather.icon.icon_name}`} />\n        </div>\n        <div className='current-weather__humidity' title='Humidity'>\n          <WiRaindrop size='2em' /> {weather.humidity} %\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n  theme: state.ui.theme,\n  locationList: state.location.list,\n  location: state.location.current,\n  weather: state.weather.today\n});\n\nexport default connect(\n  mapStateToProps,\n  { setLocationAndUpdate }\n)(CurrentWeather);\n","import React from 'react';\n\ninterface ForecastProps {\n  day: string|number;\n  temp: string|number;\n  icon: string;\n}\n\nexport const Forecast: React.FC<ForecastProps> = props => (\n  <div className='forecast-item__root'>\n    <div className='forecast-item__day'>{props.day}</div>\n    <div className='forecast-item__forecast'>\n      <div className='forecast-item__temperature'>\n        {props.temp}\n        <sup>&deg;</sup>\n      </div>\n      <i className={`forecast-item__icon owf owf-${props.icon}`} />\n    </div>\n  </div>\n);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { StoreState } from '../../store';\nimport { Forecast } from './Forecast';\nimport moment from 'moment';\n\nimport './Forecasts.css'\n\ninterface ForecastsProps {\n  today: any;\n  tomorrow: any;\n  after: any;\n}\n\nclass Forecasts extends Component<ForecastsProps> {\n  render() {\n    const { today, tomorrow, after } = this.props;\n\n    return (\n      <div className='forecasts__root'>\n        <Forecast\n          day={moment(today.date).format('dddd')}\n          icon={today.icon.icon_name}\n          temp={today.temp.now}\n        />\n        {tomorrow && (\n          <Forecast\n            day={moment(tomorrow.date).format('dddd')}\n            icon={tomorrow.icon.icon_name}\n            temp={tomorrow.temp.now}\n          />\n        )}\n        {after && (\n          <Forecast\n            day={moment(after.date).format('dddd')}\n            icon={after.icon.icon_name}\n            temp={after.temp.now}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n  today: state.weather.today,\n  tomorrow: state.weather.tomorrow,\n  after: state.weather.after\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(Forecasts);\n","import React from 'react';\nimport CurrentWeather from '../CurrentWeather';\nimport Forecasts from '../Forecasts';\nimport { connect } from 'react-redux';\nimport { setTheme } from '../../actions';\n\nclass App extends React.PureComponent<{ setTheme: any }> {\n  componentDidMount() {\n    const now = new Date();\n    if (now.getHours() > 17 || now.getHours() < 5) {\n      this.props.setTheme('dark');\n    } else {\n      this.props.setTheme('light');\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <CurrentWeather />\n        <Forecasts />\n      </>\n    );\n  }\n}\n\nexport default connect(\n  null,\n  { setTheme }\n)(App);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { hydrate, render } from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport './css/index.css';\nimport store from './store';\nimport App from './components/App';\n\n\nconst root = document.getElementById('root');\nconst renderer = root && root.hasChildNodes() ? hydrate : render;\n\nrenderer(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  root\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}